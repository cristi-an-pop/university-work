Program ID: 817
Execution Stack:
[(((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt));print(rH(v3)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 817
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 950
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 6
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:
SemaphoreTable:

Barrier Table:
BarrierTable:
1 -> (3, [817, 950, 6])

Latch Table:
LatchTable:


Program ID: 999
Execution Stack:
[((int v;v=4);while(v > 0) { (print(v);v=v-1) })]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 999
Execution Stack:
[]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[(((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt));print(rH(v3)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 599
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 599
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 17
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 17
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 944
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 944
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 599
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 17
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [944, 599, 17])

Latch Table:


Program ID: 130
Execution Stack:
[((int v;v=4);while(v > 0) { (print(v);v=v-1) })]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 130
Execution Stack:
[]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[((int v;v=0);for(v=0; v <= 3; v=v+1) print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 210
Execution Stack:
[]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[((int v;v=0);for(v=0; v <= 3; v=v+1) print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 285
Execution Stack:
[]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[((int v;v=0);for(v=0; v <= 3; v=v+1) print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), (int v;v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v), v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[for(v=0; v <= 3; v=v+1) print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=0]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=1}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=1}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=2}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=2}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, (print(v);v=v+1)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1, print(v)]
Symbol Table:
{v=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }, v=v+1]
Symbol Table:
{v=3}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[while(v <= 3) { (print(v);v=v+1) }]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 576
Execution Stack:
[]
Symbol Table:
{v=4}
Output:
[0, 1, 2, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[(((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt));print(rH(v3)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 540
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 540
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 778
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 778
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 828
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 828
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 540
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 778
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [828, 540, 778])

Latch Table:


Program ID: 557
Execution Stack:
[(((((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop);y=3);nop);print(v*10))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), ((((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop);y=3);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), ((((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop);y=3);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, (((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop);y=3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, (((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop);y=3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, ((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, ((((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, (((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, (((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3);x=1)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, ((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, ((((int v;int x);int y);v=0);repeat (fork((print(v);v=v-1));v=v+1) until v == 3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, (((int v;int x);int y);v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, (((int v;int x);int y);v=0)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, ((int v;int x);int y)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, ((int v;int x);int y)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, (int v;int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, (int v;int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, int x, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, int x, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, int x]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y, int x]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y]
Symbol Table:
{v=0, x=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0, int y]
Symbol Table:
{v=0, x=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3, v=0]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, repeat (fork((print(v);v=v-1));v=v+1) until v == 3]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=1, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=1, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=0, x=0, y=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[v=v-1]
Symbol Table:
{v=0, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[v=v-1]
Symbol Table:
{v=0, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 811
Execution Stack:
[]
Symbol Table:
{v=-1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[v=v-1]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, (fork((print(v);v=v-1));v=v+1)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[v=v-1]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 381
Execution Stack:
[]
Symbol Table:
{v=0, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1, fork((print(v);v=v-1))]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }, v=v+1]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[(print(v);v=v-1)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=3, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1, while(!v == 3) { (fork((print(v);v=v-1));v=v+1) }]
Symbol Table:
{v=3, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[v=v-1, print(v)]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1]
Symbol Table:
{v=3, x=0, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[v=v-1]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop, x=1]
Symbol Table:
{v=3, x=0, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[v=v-1]
Symbol Table:
{v=2, x=0, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop]
Symbol Table:
{v=3, x=1, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 143
Execution Stack:
[]
Symbol Table:
{v=1, x=0, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3, nop]
Symbol Table:
{v=3, x=1, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3]
Symbol Table:
{v=3, x=1, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop, y=3]
Symbol Table:
{v=3, x=1, y=0}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop]
Symbol Table:
{v=3, x=1, y=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10), nop]
Symbol Table:
{v=3, x=1, y=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10)]
Symbol Table:
{v=3, x=1, y=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[print(v*10)]
Symbol Table:
{v=3, x=1, y=3}
Output:
[0, 1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 557
Execution Stack:
[]
Symbol Table:
{v=3, x=1, y=3}
Output:
[0, 1, 2, 30]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[(((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt));print(rH(v3)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 485
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 485
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 570
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 570
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 114
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 114
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 485
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


Program ID: 570
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [114, 485, 570])

Latch Table:


