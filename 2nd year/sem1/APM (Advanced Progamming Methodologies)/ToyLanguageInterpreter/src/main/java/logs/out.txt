Program ID: 102
Execution Stack:
[IF(10 < 2) THEN (nop) ELSE (nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 102
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 102
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 102
Execution Stack:
[]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 585
Execution Stack:
[IF(10 < 2) THEN (nop) ELSE (nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 585
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 585
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 585
Execution Stack:
[]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[((((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v));print(rH(a)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), (((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), (((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), ((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), ((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), (((int v;Ref(int) a);v=10);new(a, 22))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), (((int v;Ref(int) a);v=10);new(a, 22))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), ((int v;Ref(int) a);v=10)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), ((int v;Ref(int) a);v=10)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, (int v;Ref(int) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, (int v;Ref(int) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10]
Symbol Table:
{a=(0, int), v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10]
Symbol Table:
{a=(0, int), v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22)]
Symbol Table:
{a=(0, int), v=10}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22)]
Symbol Table:
{a=(0, int), v=10}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(wH(a, 30);(v=32;(print(v);print(rH(a)))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(wH(a, 30);(v=32;(print(v);print(rH(a)))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(v=32;(print(v);print(rH(a)))), wH(a, 30)]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(v=32;(print(v);print(rH(a)))), wH(a, 30)]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 186
Execution Stack:
[]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(v=32;(print(v);print(rH(a))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(v=32;(print(v);print(rH(a))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(print(v);print(rH(a))), v=32]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(print(v);print(rH(a))), v=32]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(print(v);print(rH(a)))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[(print(v);print(rH(a)))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22, 32]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22, 32]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 313
Execution Stack:
[]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 22, 32, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[((((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v));print(rH(a)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), (((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), (((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))));print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), ((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), ((((int v;Ref(int) a);v=10);new(a, 22));fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), (((int v;Ref(int) a);v=10);new(a, 22))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), (((int v;Ref(int) a);v=10);new(a, 22))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), ((int v;Ref(int) a);v=10)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), ((int v;Ref(int) a);v=10)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, (int v;Ref(int) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, (int v;Ref(int) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10, Ref(int) a]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10]
Symbol Table:
{a=(0, int), v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22), v=10]
Symbol Table:
{a=(0, int), v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22)]
Symbol Table:
{a=(0, int), v=10}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a)))))), new(a, 22)]
Symbol Table:
{a=(0, int), v=10}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v), fork((wH(a, 30);(v=32;(print(v);print(rH(a))))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(wH(a, 30);(v=32;(print(v);print(rH(a)))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(wH(a, 30);(v=32;(print(v);print(rH(a)))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(v=32;(print(v);print(rH(a)))), wH(a, 30)]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(v=32;(print(v);print(rH(a)))), wH(a, 30)]
Symbol Table:
{a=(1, int), v=10}
Output:
[10]
File Table:
{}
Heap:
1 -> 22

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 582
Execution Stack:
[]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(v=32;(print(v);print(rH(a))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(v=32;(print(v);print(rH(a))))]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(print(v);print(rH(a))), v=32]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(print(v);print(rH(a))), v=32]
Symbol Table:
{a=(1, int), v=10}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(print(v);print(rH(a)))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[(print(v);print(rH(a)))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[print(rH(a)), print(v)]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30, 32]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[print(rH(a))]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30, 32]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 657
Execution Stack:
[]
Symbol Table:
{a=(1, int), v=32}
Output:
[10, 30, 32, 30]
File Table:
{}
Heap:
1 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 856
Execution Stack:
[IF(10 < 2) THEN (nop) ELSE (nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 856
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 856
Execution Stack:
[nop]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 856
Execution Stack:
[]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[(((((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g);new(g, 5));new(g, 10));print(rH(g)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), ((((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g);new(g, 5));new(g, 10))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), ((((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g);new(g, 5));new(g, 10))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), (((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g);new(g, 5))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), (((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g);new(g, 5))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), ((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), ((((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))));Ref(int) g)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, (((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, (((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30));print(rH(rH(a))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), ((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), ((((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v));new(v, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), (((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), (((Ref(int) v;new(v, 20));Ref(Ref(int)) a);new(a, v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), ((Ref(int) v;new(v, 20));Ref(Ref(int)) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), ((Ref(int) v;new(v, 20));Ref(Ref(int)) a)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, (Ref(int) v;new(v, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, (Ref(int) v;new(v, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, new(v, 20), Ref(int) v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, new(v, 20), Ref(int) v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, new(v, 20)]
Symbol Table:
{v=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a, new(v, 20)]
Symbol Table:
{v=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a]
Symbol Table:
{v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v), Ref(Ref(int)) a]
Symbol Table:
{v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v)]
Symbol Table:
{a=(0, Ref(int)), v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30), new(a, v)]
Symbol Table:
{a=(0, Ref(int)), v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30)]
Symbol Table:
{a=(2, Ref(int)), v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a))), new(v, 30)]
Symbol Table:
{a=(2, Ref(int)), v=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a)))]
Symbol Table:
{a=(2, Ref(int)), v=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g, print(rH(rH(a)))]
Symbol Table:
{a=(2, Ref(int)), v=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g]
Symbol Table:
{a=(2, Ref(int)), v=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5), Ref(int) g]
Symbol Table:
{a=(2, Ref(int)), v=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5)]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(0, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10), new(g, 5)]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(0, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10)]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(4, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30
4 -> 5

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g)), new(g, 10)]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(4, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30
4 -> 5

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g))]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(5, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30
4 -> 5
5 -> 10

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[print(rH(g))]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(5, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30
5 -> 10

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 238
Execution Stack:
[]
Symbol Table:
{a=(2, Ref(int)), v=(3, int), g=(5, int)}
Output:
[20, 10]
File Table:
{}
Heap:
1 -> 20
2 -> (1, int)
3 -> 30
5 -> 10

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[((((bool a;int v);a=true);IF(a) THEN (v=2) ELSE (v=3));print(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), (((bool a;int v);a=true);IF(a) THEN (v=2) ELSE (v=3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), (((bool a;int v);a=true);IF(a) THEN (v=2) ELSE (v=3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), ((bool a;int v);a=true)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), ((bool a;int v);a=true)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, (bool a;int v)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, (bool a;int v)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, int v, bool a]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, int v, bool a]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, int v]
Symbol Table:
{a=false}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true, int v]
Symbol Table:
{a=false}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true]
Symbol Table:
{a=false, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3), a=true]
Symbol Table:
{a=false, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3)]
Symbol Table:
{a=true, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), IF(a) THEN (v=2) ELSE (v=3)]
Symbol Table:
{a=true, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), v=2]
Symbol Table:
{a=true, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v), v=2]
Symbol Table:
{a=true, v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v)]
Symbol Table:
{a=true, v=2}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[print(v)]
Symbol Table:
{a=true, v=2}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 668
Execution Stack:
[]
Symbol Table:
{a=true, v=2}
Output:
[2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[((((((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c));closeRFile())]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), (((((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), (((((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 910
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="D:\ubb\university-work\2nd year\APM (Advanced Progamming Methodologies)\ToyLanguageInterpreter\src\main\java\IO\test.in"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[((int v;v=4);while(v > 0) { (print(v);v=v-1) })]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (int v;v=4)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4, int v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=4]
Symbol Table:
{v=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=4}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=4}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=3}
Output:
[4]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=3}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=2}
Output:
[4, 3]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=2}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, (print(v);v=v-1)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1, print(v)]
Symbol Table:
{v=1}
Output:
[4, 3, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }, v=v-1]
Symbol Table:
{v=1}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[while(v > 0) { (print(v);v=v-1) }]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 780
Execution Stack:
[]
Symbol Table:
{v=0}
Output:
[4, 3, 2, 1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[((((((bool b;int c);b=true);c = b ? 100 : 200);print(c));c = false ? 100 : 200);print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), (((((bool b;int c);b=true);c = b ? 100 : 200);print(c));c = false ? 100 : 200)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), (((((bool b;int c);b=true);c = b ? 100 : 200);print(c));c = false ? 100 : 200)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, ((((bool b;int c);b=true);c = b ? 100 : 200);print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, ((((bool b;int c);b=true);c = b ? 100 : 200);print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), (((bool b;int c);b=true);c = b ? 100 : 200)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), (((bool b;int c);b=true);c = b ? 100 : 200)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, ((bool b;int c);b=true)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, ((bool b;int c);b=true)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, (bool b;int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, (bool b;int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, int c, bool b]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, int c, bool b]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, int c]
Symbol Table:
{b=false}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true, int c]
Symbol Table:
{b=false}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true]
Symbol Table:
{b=false, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200, b=true]
Symbol Table:
{b=false, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c = b ? 100 : 200]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), IF(b) THEN (c=100) ELSE (c=200)]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), IF(b) THEN (c=100) ELSE (c=200)]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c=100]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c), c=100]
Symbol Table:
{b=true, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c)]
Symbol Table:
{b=true, c=100}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200, print(c)]
Symbol Table:
{b=true, c=100}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c = false ? 100 : 200]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), IF(false) THEN (c=100) ELSE (c=200)]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), IF(false) THEN (c=100) ELSE (c=200)]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c=200]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c), c=200]
Symbol Table:
{b=true, c=100}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c)]
Symbol Table:
{b=true, c=200}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(c)]
Symbol Table:
{b=true, c=200}
Output:
[100]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[]
Symbol Table:
{b=true, c=200}
Output:
[100, 200]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[((((((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt));print(100));countDownLatch(cnt));print(100))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), (((((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt));print(100));countDownLatch(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), (((((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt));print(100));countDownLatch(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), ((((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt));print(100))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), ((((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt));print(100))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), (((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), (((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))));awaitLatch(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))));fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))));fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)));fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newLatch(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))), newLatch(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))), fork((wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))), fork((wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(print(rH(v1));countDownLatch(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt), fork((wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(print(rH(v1));countDownLatch(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(wH(v2, rH(v2)*10);(print(rH(v2));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(print(rH(v1));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(print(rH(v2));countDownLatch(cnt)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[(print(rH(v1));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(print(rH(v2));countDownLatch(cnt)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(wH(v3, rH(v3)*10);(print(rH(v3));countDownLatch(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[countDownLatch(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(print(rH(v2));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(print(rH(v3));countDownLatch(cnt)), wH(v3, rH(v3)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[countDownLatch(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[(print(rH(v2));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(print(rH(v3));countDownLatch(cnt)), wH(v3, rH(v3)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[countDownLatch(cnt), print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(print(rH(v3));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 853
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 956
Execution Stack:
[countDownLatch(cnt), print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 481
Execution Stack:
[(print(rH(v3));countDownLatch(cnt))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 3


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 853
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 956
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 481
Execution Stack:
[countDownLatch(cnt), print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 956
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 481
Execution Stack:
[countDownLatch(cnt), print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 2


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 1


Program ID: 956
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 1


Program ID: 481
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 1


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 1


Program ID: 481
Execution Stack:
[countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 1


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 481
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100), awaitLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt), print(100)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481, 100]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100), countDownLatch(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481, 100]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481, 100, 126]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[print(100)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481, 100, 126]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 126
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[20, 30, 853, 956, 40, 481, 100, 126, 100]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 40

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:
1 -> 0


Program ID: 420
Execution Stack:
[(((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt));print(rH(v3)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), ((((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))));await(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), (((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))));fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), ((((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)));fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), (((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4));newBarrier(cnt, rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), ((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3));new(v3, 4))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), (((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2));new(v2, 3))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), ((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), (((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, ((Ref(int) v1;Ref(int) v2);Ref(int) v3)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt, Ref(int) v3]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4), new(v2, 3)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(0, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2)), new(v3, 4)]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))), newBarrier(cnt, rH(v2))]
Symbol Table:
{cnt=0, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))), fork((await(cnt);(wH(v1, rH(v1)*10);print(rH(v1)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 12
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt), fork((await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 12
Execution Stack:
[(await(cnt);(wH(v1, rH(v1)*10);print(rH(v1))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 207
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 207
Execution Stack:
[(await(cnt);(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3)), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2)))), await(cnt)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 420
Execution Stack:
[print(rH(v3))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[(wH(v1, rH(v1)*10);print(rH(v1)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);(wH(v2, rH(v2)*10);print(rH(v2))))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 420
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[print(rH(v1)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2))), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 2
2 -> 3
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[(wH(v2, rH(v2)*10);print(rH(v2)))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 12
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[print(rH(v2)), wH(v2, rH(v2)*10)]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 30
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[print(rH(v2))]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 207
Execution Stack:
[]
Symbol Table:
{cnt=1, v1=(1, int), v2=(2, int), v3=(3, int)}
Output:
[4, 20, 300]
File Table:
{}
Heap:
1 -> 20
2 -> 300
3 -> 4

Lock Table:

Semaphore Table:

Barrier Table:
1 -> (3, [420, 12, 207])

Latch Table:


Program ID: 337
Execution Stack:
[(((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)));unlock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), ((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), ((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), (((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), (((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), ((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), ((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), (((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), (((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), ((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), ((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), (((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), (((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, ((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, ((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, (((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, (((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, ((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, ((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, (((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, (((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), ((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), ((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), (((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), (((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), ((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), ((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), (((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), (((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), ((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), ((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), (((Ref(int) v1;Ref(int) v2);int x);int q)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), (((Ref(int) v1;Ref(int) v2);int x);int q)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, ((Ref(int) v1;Ref(int) v2);int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, ((Ref(int) v1;Ref(int) v2);int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q]
Symbol Table:
{x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q]
Symbol Table:
{x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20)]
Symbol Table:
{q=0, x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20)]
Symbol Table:
{q=0, x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x))), fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x))), fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(lock(x);(wH(v1, rH(v1)-1);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(lock(x);(wH(v1, rH(v1)-1);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q))), fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q))), fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(lock(q);(wH(v2, rH(v2)+5);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(lock(q);(wH(v2, rH(v2)+5);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[unlock(x), wH(v1, rH(v1)*10)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[unlock(x), wH(v1, rH(v1)*10)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 233
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 233
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 233
Execution Stack:
[]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[unlock(q), wH(v2, rH(v2)*10)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[unlock(q), wH(v2, rH(v2)*10)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 302

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 302
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 337
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[unlock(q), wH(v2, rH(v2)+5)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[unlock(q), wH(v2, rH(v2)+5)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 300

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[unlock(x), wH(v1, rH(v1)-1)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[unlock(x), wH(v1, rH(v1)-1)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 200
2 -> 305

Lock Table:
1 -> 577
2 -> 25

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> 577
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> 577
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 25
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> 577
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> 577
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> 577
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 337

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 577
Execution Stack:
[]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 337

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q), print(rH(v2))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 337

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 337

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 337

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 337
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[200, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[(((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)));unlock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), ((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), ((((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q));print(rH(v2)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), (((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), (((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x));lock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), ((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), ((((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)));unlock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), (((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), (((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x));print(rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), ((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), ((((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop);lock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), (((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), (((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, ((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, ((((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, (((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, (((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop);nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, ((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, ((((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))));nop)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, (((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, (((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q));fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), ((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), ((((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))));newLock(q))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), (((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), (((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x));fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), ((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), ((((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30));newLock(x))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), (((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), (((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20));new(v2, 30))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), ((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), ((((Ref(int) v1;Ref(int) v2);int x);int q);new(v1, 20))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), (((Ref(int) v1;Ref(int) v2);int x);int q)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), (((Ref(int) v1;Ref(int) v2);int x);int q)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, ((Ref(int) v1;Ref(int) v2);int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, ((Ref(int) v1;Ref(int) v2);int x)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, (Ref(int) v1;Ref(int) v2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x, Ref(int) v2]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q, int x]
Symbol Table:
{v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q]
Symbol Table:
{x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20), int q]
Symbol Table:
{x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20)]
Symbol Table:
{q=0, x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30), new(v1, 20)]
Symbol Table:
{q=0, x=0, v1=(0, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x), new(v2, 30)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(0, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))), newLock(x)]
Symbol Table:
{q=0, x=0, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q), fork((fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x)))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))), newLock(q)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))));(lock(x);(wH(v1, rH(v1)*10);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x))), fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop, fork((fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q)))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x))), fork((lock(x);(wH(v1, rH(v1)-1);unlock(x))))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(lock(x);(wH(v1, rH(v1)-1);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(lock(x);(wH(v1, rH(v1)*10);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))));(lock(q);(wH(v2, rH(v2)*10);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(lock(x);(wH(v1, rH(v1)-1);unlock(x)))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q))), fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q))), fork((lock(q);(wH(v2, rH(v2)+5);unlock(q))))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(lock(q);(wH(v2, rH(v2)+5);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop, nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[(wH(v1, rH(v1)*10);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(lock(q);(wH(v2, rH(v2)*10);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(lock(q);(wH(v2, rH(v2)+5);unlock(q)))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[unlock(x), wH(v1, rH(v1)*10)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x), nop]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[unlock(x), wH(v1, rH(v1)*10)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x)), lock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 20
2 -> 30

Lock Table:
1 -> 829
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 829
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 829
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[(wH(v2, rH(v2)*10);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 829
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[(wH(v1, rH(v1)-1);unlock(x))]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 829
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> 829
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 829
Execution Stack:
[]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[unlock(q), wH(v2, rH(v2)*10)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[unlock(x), wH(v1, rH(v1)-1)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1)), lock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[unlock(q), wH(v2, rH(v2)*10)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[unlock(x), wH(v1, rH(v1)-1)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 200
2 -> 30

Lock Table:
1 -> -1
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x), print(rH(v1))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[unlock(x)]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> 100

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 100
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 376
Execution Stack:
[]
Symbol Table:
{q=0, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q), unlock(x)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> 721
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[(wH(v2, rH(v2)+5);unlock(q))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[unlock(q), wH(v2, rH(v2)+5)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[unlock(q), wH(v2, rH(v2)+5)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 300

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2)), lock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 804

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 721

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 804
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 721

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q), print(rH(v2))]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 721

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 721

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[unlock(q)]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> 721

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 721
Execution Stack:
[]
Symbol Table:
{q=2, x=1, v1=(1, int), v2=(2, int)}
Output:
[199, 305]
File Table:
{}
Heap:
1 -> 199
2 -> 305

Lock Table:
1 -> -1
2 -> -1

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[((((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1));release(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), (((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), (((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), ((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), ((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), (((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), (((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), ((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), ((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), (((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), (((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), ((Ref(int) v1;int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), ((Ref(int) v1;int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), (Ref(int) v1;int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), (Ref(int) v1;int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1))]
Symbol Table:
{cnt=0, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1))]
Symbol Table:
{cnt=0, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt))))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt))))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt), print(rH(v1)-1)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(print(rH(v1));release(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 334
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(print(rH(v1));release(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[(print(rH(v1));release(cnt))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[release(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[release(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 833
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 831
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [334, 833])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[((((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1));release(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), (((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), (((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt));print(rH(v1)-1))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), ((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), ((((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))));acquire(cnt))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), (((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), (((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))));fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), ((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), ((((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)));fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), (((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), (((Ref(int) v1;int cnt);new(v1, 2));newSemaphore(cnt, rH(v1)))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), ((Ref(int) v1;int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), ((Ref(int) v1;int cnt);new(v1, 2))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), (Ref(int) v1;int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), (Ref(int) v1;int cnt)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt, Ref(int) v1]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2), int cnt]
Symbol Table:
{v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1)), new(v1, 2)]
Symbol Table:
{cnt=0, v1=(0, int)}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1))]
Symbol Table:
{cnt=0, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))), newSemaphore(cnt, rH(v1))]
Symbol Table:
{cnt=0, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))), fork((acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt))))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt), fork((acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt))))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(acquire(cnt);(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt), print(rH(v1)-1)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(wH(v1, rH(v1)*10);(print(rH(v1));release(cnt)))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(print(rH(v1));release(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 996
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(print(rH(v1));release(cnt)), wH(v1, rH(v1)*10)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 2

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[(print(rH(v1));release(cnt))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[release(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[release(cnt), print(rH(v1))]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 518
Execution Stack:
[release(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 265
Execution Stack:
[(wH(v1, rH(v1)*10);(wH(v1, rH(v1)*2);(print(rH(v1));release(cnt)))), acquire(cnt)]
Symbol Table:
{cnt=1, v1=(1, int)}
Output:
[1, 20]
File Table:
{}
Heap:
1 -> 20

Lock Table:

Semaphore Table:
1 -> (2, [996, 518])

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[((((((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c));closeRFile())]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), (((((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), (((((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="src/main/java/IO");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="src/main/java/IO");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="src/main/java/IO");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="src/main/java/IO");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="src/main/java/IO");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="src/main/java/IO")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="src/main/java/IO")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c]
Symbol Table:
{v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile(), print(c)]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile()]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[0, 0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 330
Execution Stack:
[closeRFile()]
Symbol Table:
{c=0, v="src/main/java/IO"}
Output:
[0, 0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[((((((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c));closeRFile())]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), (((((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), (((((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), ((((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c));readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), (((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c));print(c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), ((((string v;v="src/main/java/IO/test.in");openRFile(v));int c);readFile(v, c))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="src/main/java/IO/test.in");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), (((string v;v="src/main/java/IO/test.in");openRFile(v));int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="src/main/java/IO/test.in");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, ((string v;v="src/main/java/IO/test.in");openRFile(v))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="src/main/java/IO/test.in")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), (string v;v="src/main/java/IO/test.in")]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO/test.in", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO/test.in", string v]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO/test.in"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v), v="src/main/java/IO/test.in"]
Symbol Table:
{v=""}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c, openRFile(v)]
Symbol Table:
{v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c]
Symbol Table:
{v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c), int c]
Symbol Table:
{v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c), readFile(v, c)]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c)]
Symbol Table:
{c=5, v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c), print(c)]
Symbol Table:
{c=5, v="src/main/java/IO/test.in"}
Output:
[]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c)]
Symbol Table:
{c=5, v="src/main/java/IO/test.in"}
Output:
[5]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c), readFile(v, c)]
Symbol Table:
{c=5, v="src/main/java/IO/test.in"}
Output:
[5]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c)]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[5]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile(), print(c)]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[5]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile()]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[5, 0]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[closeRFile()]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[5, 0]
File Table:
{src/main/java/IO/test.in=java.io.BufferedReader@112c3b18}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 800
Execution Stack:
[]
Symbol Table:
{c=0, v="src/main/java/IO/test.in"}
Output:
[5, 0]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[(((((((int a;int b);int c);a=1);b=2);c=5);switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));});print(300))]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), ((((((int a;int b);int c);a=1);b=2);c=5);switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));})]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), ((((((int a;int b);int c);a=1);b=2);c=5);switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));})]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, (((((int a;int b);int c);a=1);b=2);c=5)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, (((((int a;int b);int c);a=1);b=2);c=5)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, ((((int a;int b);int c);a=1);b=2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, ((((int a;int b);int c);a=1);b=2)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, (((int a;int b);int c);a=1)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, (((int a;int b);int c);a=1)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, ((int a;int b);int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, ((int a;int b);int c)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, (int a;int b)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, (int a;int b)]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, int b, int a]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, int b, int a]
Symbol Table:
{}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, int b]
Symbol Table:
{a=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c, int b]
Symbol Table:
{a=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c]
Symbol Table:
{a=0, b=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1, int c]
Symbol Table:
{a=0, b=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1]
Symbol Table:
{a=0, b=0, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2, a=1]
Symbol Table:
{a=0, b=0, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2]
Symbol Table:
{a=1, b=0, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5, b=2]
Symbol Table:
{a=1, b=0, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5]
Symbol Table:
{a=1, b=2, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}, c=5]
Symbol Table:
{a=1, b=2, c=0}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), switch(a*10) { case b*c: (print(a);print(b)); case 10: (print(100);print(200));}]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), IF(a*10 == b*c) THEN ((print(a);print(b))) ELSE (IF(a*10 == 10) THEN ((print(100);print(200))) ELSE (print(300)))]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), IF(a*10 == b*c) THEN ((print(a);print(b))) ELSE (IF(a*10 == 10) THEN ((print(100);print(200))) ELSE (print(300)))]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), (print(a);print(b))]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), (print(a);print(b))]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), print(b), print(a)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), print(b), print(a)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), print(b)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300), print(b)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[1]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[print(300)]
Symbol Table:
{a=1, b=2, c=5}
Output:
[1, 2]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


Program ID: 523
Execution Stack:
[]
Symbol Table:
{a=1, b=2, c=5}
Output:
[1, 2, 300]
File Table:
{}
Heap:

Lock Table:

Semaphore Table:

Barrier Table:

Latch Table:


