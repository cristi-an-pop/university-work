;a) Write a function to return the difference of two sets.

(defun myAppend (l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)


(defun checkExistence(l elem)
  (cond
    ((null l) nil)
    ((equal (car l) elem) t)
    (t (checkExistence (cdr l) elem))
  )
)


(defun diffSets(l p r)
  (cond
    ((null l) r)
    ((checkExistence p (car l)) (diffSets (cdr l) p r))
    (t (diffSets (cdr l) p (myAppend r (list (car l)))))
  )
)


(defun mainA(l p)
  (myAppend (diffSets l p (list )) (diffSets p l (list )))
)


;b) Write a function to reverse a list with its all sublists, on all levels.


(defun myReverse(l)
  (cond
    ((null l) nil)
    ((listp (car l)) (myAppend (myReverse (cdr l)) (list (myReverse (car l)))))
    (t (myAppend (myReverse (cdr l)) (list (car l))))
  )
)


; c) Write a function to return the list of the first elements of all list elements of a given list with an odd
;    number of elements at superficial level. Example:
;    (1 2 (3 (4 5) (6 7)) 8 (9 10 11)) => (1 3 9).

(defun oddNrOfElems(l c)
  (cond
    ((and (null l) (equal 1 (mod c 2))) t)
    ((and (null l) (equal 0 (mod c 2))) nil)
    (t (oddNrOfElems (cdr l) (+ 1 c)))
  )
)

(defun checkOdd(l)
  (oddNrOfElems l 0)
)

(defun firstElem(l f)
  (cond
    ((null l) nil)
    ((listp (car l)) (myAppend (firstElem (car l) 0) (firstElem (cdr l) f)))
    ((and (checkOdd l) (= f 0)) (cons (car l) (firstElem (cdr l) 1)))
    (t (firstElem(cdr l) 1))
  )
)

(defun mainC(l)
  (firstElem l 0)
)


; d) Write a function to return the sum of all numerical atoms in a list at superficial level.


(defun sum(l)
  (cond
    ((null l) 0)
    ((numberp (car l)) (+ (car l) (sum (cdr l))))
    (t (sum (cdr l)))
  )
)