%1.
%a. Write a predicate to determine the lowest common multiple of a list formed from integer numbers.

%gcd(a, b) = b, if a = 0
%          = a, if b = 0
%          = gcd(a % b, b), if a >= b
%          = gcd(a, b % a), if b >= a
gcd(0, B, B) :- !.
gcd(A, 0, A) :- !.
gcd(A, B, R) :-
    A >= B,
    A1 is A mod B,
    gcd(A1, B, R).
gcd(A, B, R) :-
    B >= A,
    B1 is B mod A,
    gcd(A, B1, R).

%lcm(a, b) = a * b / gcd(a, b)
lcm(A, B, R) :-
    gcd(A, B, RGCD),
    R is A * B / RGCD.

%lcmList(l1, ..., ln) = l, if n = 1
%                     = lcmList(l, lcm(l1, l2)) otherwise
lcmList([E], E).
lcmList([H|T], R) :-
    lcmList(T, R1),
    lcm(H, R1, R).



%b. Write a predicate to add a value v after 1-st, 2-nd, 4-th, 8-th, â€¦ element in a list.

% insertAtPos(l1l2...ln, v, pos, index) =
%                                       = [], if n = 0 
%                                       = {l1} U {v} U insertAtPos(l2...ln, v, pos*2, index + 1), if index = pos
%                                       = {l1} U insertAtPos(l2...ln, v, pos, index + 1), if pos != index
insertAtPos([], _, _, _, []).
insertAtPos([H|T], V, POS, INDEX, [H, V | R]):-
    POS=:=INDEX,
    NewPos is POS * 2,
    NewIndex is INDEX + 1,
    insertAtPos(T, V, NewPos, NewIndex, R).
insertAtPos([H|T], V, POS, INDEX, [H | R]):-
    NewIndex is INDEX + 1,
    insertAtPos(T, V, POS, NewIndex, R).


